import { Component, OnInit, Inject, Input, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';
import { FormArray, FormControl, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';
import { AfterViewInit } from '@angular/core/src/metadata/lifecycle_hooks';
import { Http, HttpModule } from '@angular/http';
import { ApiCommonService } from '../../../services/api-common.service';
import { environment } from '../../../../environments/environment';
import { KeycloakService } from '../../../keycloak/keycloak.service';
import { AppComponent } from '../../../../app/app.component';
import { Router } from '@angular/router';
import { SelectionModel } from '@angular/cdk/collections';
import { HttpClient, HttpResponse, HttpEventType } from '@angular/common/http';
import { UploadFileService } from '../../../services/UploadFileService.service';
import { DataTable, SelectItem } from 'primeng/primeng';
import { FileValidator } from '../../../attendance/components/attendance-records/file-input.validator';
declare var $: any;
@Component({
  selector: 'app-employees-main',
  templateUrl: './employees-main.component.html',
  styleUrls: ['./employees-main.component.scss']
})
export class EmployeesMainComponent implements OnInit, AfterViewInit {
  @ViewChild("dt1") dt: DataTable;
  workLocations: SelectItem[] = [];
  bands: SelectItem[] = [];
  departments: SelectItem[] = [];
  designations: SelectItem[] = [];
  organization: SelectItem[] = [];
  isChecked: boolean = false;
  employeeData = [];
  errorMessage: any;
  action: any;
  selectedFiles: FileList;
  currentFileUpload: File;
  selection = new SelectionModel<Element>(true, []);
  selectedRows = [];
  emailAutoGeneratedValues: SelectItem[] = [{ label: 'Yes', value: 'Yes' }, { label: 'No', value: 'No' }];
  taxYear = [];
  columns = [
    { field: 'image', header: 'Profile Pic' },
    { field: 'fullName', header: 'Name' },
    { field: 'empCode', header: 'Employee Code' },
    { field: 'empJobInfoOrganization', header: 'Organization' },
    { field: 'workLocation', header: 'Location' },
    { field: 'band', header: 'Band' },
    { field: 'department', header: 'Department' },
    { field: 'designation', header: 'Designation' },
    { field: 'joiningDate', header: 'Joining Date' },
    { field: 'empEmail', header: 'Contact Information' },
    { field: 'emailAutoGenerated', header: 'Email Auto Generated' },
    { field: 'status', header: 'Status' },
    { field: 'actions', header: 'Actions' },
  ]
  // dataSource: MatTableDataSource<Element>;
  // @ViewChild(MatPaginator) paginator: MatPaginator;
  // @ViewChild(MatSort) sort: MatSort;

  constructor(private uploadService: UploadFileService, public dialog: MatDialog, private http: Http, private serviceApi: ApiCommonService, private router: Router,) {
    this.getTaxYears();
    this.getEmployeeDirectoryData();
    var rolesArr = KeycloakService.getUserRole();
  }
  ngOnInit() {
    // this.dataSource = new MatTableDataSource<Element>(this.employeeData);
  }
  // getRowData(element: any, event: any) {
  //   console.log('event ' + event.checked)
  //   console.log(element)


  //   if (event.checked) {
  //     this.checkedRowData.push(
  //       element.empCode
  //     )
  //     console.log(JSON.stringify(this.checkedRowData));
  //   }
  //   else {
  //     console.log('ENter in the Else Block');
  //     // this.tempCheckedRowData = this.checkedRowData;
  //     for (var i = 0; i < this.checkedRowData.length; i++) {
  //       if (this.checkedRowData[i] === element.empCode) {
  //         this.checkedRowData.splice(i, 1);
  //         console.log('Match Found');
  //       } else {
  //         console.log('Not Matched');
  //       }
  //     }
  //   }
  // }

  happinessIndexToggle(e) {
    if (e.checked) {
      this.isChecked = true;
    } else {
      this.isChecked = false
    }
    const body = this.isChecked
    this.serviceApi.post('/v1/organization/capture-employee-mood', body).subscribe(res => {
      console.log(res);
      this.successNotification(res.message)
    },
      (err) => {
        console.log(err);
      },
      () => {

      })
  }

  getHappinessIndexValue() {
    this.serviceApi.get('/v1/organization/capture-employee-mood').subscribe(res => {
      this.isChecked = res.message;
      console.log(res)
    })
  }

  getTaxYears() {
    this.taxYear = [];
    this.serviceApi.get('/v1/taxDeclaration/taxYear/all').subscribe(res => {
      if (res != null) {
        res.forEach(element => {
          this.taxYear = [...this.taxYear, element];
        });
      }
    },
      err => { },
      () => { });

  }

  selectFile(event) {
    // console.log(event);
    this.selectedFiles = event.target.files;
    // this.uploadSalaryStructure();
  }

  resetFile() {
    $('#uploadFile').val('');
  }

  openDialog() {
    const dialogRef = this.dialog.open(BulkUploadSalaryComponent, {
      width: '500px',
      panelClass: 'custom-dialog-container',
      data: { event: event }
    });
    dialogRef.afterClosed().subscribe(result => {
      console.log('The dialog was closed');
    });
  }

  bulkEmployeeUpload() {
    const dialogRef = this.dialog.open(BulkUploadEmployeeDetailsComponent, {
      width: '500px',
      panelClass: 'custom-dialog-container',
      data: { event: event }
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result != undefined) {
        if (result.status === 'Response') {
          console.log('Result value ..... ' + JSON.stringify(result));
          if (result.message) {
            this.successNotification(result.message);
          }
        }
      }
    });
  }

  bulkUploadPerquisitesDialog() {
    let dialogRef = this.dialog.open(UploadPerquisitesFileAttachmentDialogComponent, {
      width: '500px',
      panelClass: 'custom-dialog-container',
      data: { taxYear: this.taxYear }
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result != undefined) {
        if (result.status === 'Response') {
          console.log('Result value ..... ' + JSON.stringify(result));
          if (result.message) {
            this.successNotification(result.message);
          }
        }
      }
    });
  }
  bulkUploadEmployeeInvestmentDialog() {
    let dialogRef = this.dialog.open(UploadEmployeesInvestmentDialogComponent, {
      width: '500px',
      panelClass: 'custom-dialog-container',
      data: {}
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result != undefined) {
        if (result.status === 'Response') {
          console.log('Result value ..... ' + JSON.stringify(result));
          if (result.message) {
            this.successNotification(result.message);
          }
        }
      }
    });
  }

  // uploadSalaryStructure() {
  //   console.log('upload method called-->');
  //   this.currentFileUpload = this.selectedFiles.item(0);
  //   const file = <File>this.currentFileUpload;
  //   let formdata: FormData = new FormData();
  //   formdata.append('file', file);
  //   const url = '';
  //   var response;
  //   this.uploadService.pushFileToStorage(this.currentFileUpload, url).subscribe(event => {
  //     if (event.type === HttpEventType.UploadProgress) {
  //     } else if (event instanceof HttpResponse) {
  //       console.log(JSON.parse(event.body.toString()));
  //       let dialogRef = this.dialog.open(BulkEmployeeInviteResponeModelComponent, {
  //         panelClass: 'custom-dialog-container',
  //         data: {
  //           res: JSON.parse(event.body.toString())
  //         }
  //       });
  //       dialogRef.afterClosed().subscribe(result => {
  //         if (result !== undefined) {
  //           console.log('Result value ..... ' + JSON.stringify(result));
  //           if (result.message) {
  //             console.log('Result value ..... ' + result.message);
  //             if (result.status === 'Response') {
  //               this.errorMessage = result.message;
  //               this.successNotification(this.errorMessage);
  //             }
  //             else if (result.status === 'Error') {
  //               this.errorMessage = result.message;
  //             }
  //           }
  //           this.getEmployeeDirectoryData();
  //         }
  //       });
  //     }
  //   },
  //     err => {
  //       console.log('error :::' + err);
  //     },
  //     () => {
  //       this.getEmployeeDirectoryData();
  //       console.log(JSON.stringify(response));
  //       this.selectedFiles = undefined;
  //       this.resetFile();
  //     }
  //   );
  //   this.selectedFiles = undefined;
  // }










  // masterToggle(element: any, event: any) {
  //   this.isAllSelected() ?
  //     this.selection.clear() :
  //     this.dataSource.data.forEach(row => this.selection.select(row));
  //   console.log('dataSource1');
  //   this.getRowMultipleData(this.dataSource.data, event)
  // }

  // getRowMultipleData(element: any, event: any) {
  //   this.checkedRowData = [];

  //   console.log(element);
  //   console.log(event);
  //   for (var i = 0; i < element.length; i++) {
  //     const empCode = element[i].empCode;
  //     if (event.checked) {
  //       this.checkedRowData.push(
  //         empCode
  //       )
  //     }
  //     else {
  //       this.checkedRowData.splice(i, this.checkedRowData.length);
  //     }
  //   }
  // }

  // isAllSelected() {
  //   const numSelected = this.selection.selected.length;
  //   console.log('numSelected...' + numSelected);
  //   const numRows = this.dataSource.data.length;
  //   console.log('numrows...' + numRows);
  //   return numSelected === numRows;
  // }
  successNotification(successMessage: any) {
    $.notifyClose();
    $.notify({
      icon: 'check_circle',
      message: successMessage,
    },
      {
        type: 'success',
        timer: 4000,
        placement: {
          from: 'top',
          align: 'center'
        }
      });
  }
  warningNotification(warningMessage: any) {
    $.notifyClose();
    $.notify({
      icon: 'error',
      message: warningMessage,
    },
      {
        type: 'warning',
        timer: 4000,
        placement: {
          from: 'top',
          align: 'center'
        }
      });
  }

  resendMail(employee: any) {
    console.log(employee);
    this.serviceApi.get2("/v1/employee/" + employee.empCode + "/resendInviteEmail").subscribe(res => {
      this.successNotification(res.message);
    }, (err) => {
      this.errorMessage(err.message);

    }, () => {
      this.getEmployeeDirectoryData();
    });

  }

  getEmployeeDirectoryData() {
    this.employeeData = [];
    this.selectedRows = [];
    this.serviceApi.get('/v1/employee/').
      subscribe(
        res => {
          console.log('<------------------ Employee Informations ---------------------->' + JSON.stringify(res));
          res.forEach(element => {
            console.log("element.holidayDate===" + element.holidayDate);
            let found1 = this.workLocations.filter(obj => {
              if (obj.value === element.empJobInfoLocation) {
                return true;
              }
              if (element.empJobInfoLocation == null || element.empJobInfoLocation == "") {
                return true;
              }
            })
            if (!found1.length) {
              this.workLocations.push({ label: element.empJobInfoLocation, value: element.empJobInfoLocation })
            }

            let found2 = this.bands.filter(obj => {
              if (obj.value === element.empJobInfoBandName) {
                return true;
              }
              if (element.empJobInfoBandName == null || element.empJobInfoBandName == "") {
                return true;
              }

            })
            if (!found2.length) {
              this.bands.push({ label: element.empJobInfoBandName, value: element.empJobInfoBandName })
            }

            let found3 = this.departments.filter(obj => {
              if (obj.value === element.empJobInfoDepartment) {
                return true;
              }
              if (element.empJobInfoDepartment == null || element.empJobInfoDepartment == "") {
                return true;
              }

            })
            if (!found3.length) {
              this.departments.push({ label: element.empJobInfoDepartment, value: element.empJobInfoDepartment })
            }

            let found4 = this.designations.filter(obj => {
              if (obj.value === element.empJobInfoDesignation) {
                return true;
              }
              if (element.empJobInfoDesignation == null || element.empJobInfoDesignation == "") {
                return true;
              }

            })
            if (!found4.length) {
              this.designations.push({ label: element.empJobInfoDesignation, value: element.empJobInfoDesignation })
            }

            let found5 = this.organization.filter(obj => {
              if (obj.value === element.empJobInfoOrganization) {
                return true;
              }
              if (element.empJobInfoOrganization == null) {
                return true;
              }
              if (element.empJobInfoOrganization == null) {
                return true;
              }
            });
            if (!found5.length) {
              this.organization.push({ label: element.empJobInfoOrganization, value: element.empJobInfoOrganization })
            }
            this.employeeData.push(
              {
                fullName: element.empFirstName + " " + element.empLastName,
                image: element.docId != null ? environment.storageServiceBaseUrl + element.docId : null,
                initials: element.empFirstName.trim().charAt(0) + element.empLastName.trim().charAt(0),
                empCode: element.empCode,
                enrollment: element.userEnrollmentStatus,
                employment: element.userEmploymentStatus,
                status: element.userEnrollmentStatus + ' ' + element.userEmploymentStatus,
                empEmail: element.empEmail,
                joiningDate: element.empJoiningDate,
                actions: element.holidayName,
                emailVerified: element.emailVerified,
                workLocation: element.empJobInfoLocation,
                band: element.empJobInfoBandName,
                department: element.empJobInfoDepartment,
                designation: element.empJobInfoDesignation,
                empJobInfoOrganization: element.empJobInfoOrganization,
                emailAutoGenerated: element.emailAutoGenerated ? 'Yes' : 'No'
              });


          });
        },
        (error) => {
        },
        () => {
          console.log();
          this.dt.reset();
          this.getHappinessIndexValue();
        }
      );
  }

  ngAfterViewInit() {

  }
  openResetPasswordDialog(data: any) {
    let dialogRef = this.dialog.open(ResetPasswordDialogComponent, {
      width: '500px',
      panelClass: 'custom-dialog-container',
      data: { empCode: data }
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result !== undefined) {
        console.log('Result value ..... ' + JSON.stringify(result));
        if (result.message) {
          console.log('Result value ..... ' + result.message);
          if (result.status === 'Response') {
            this.errorMessage = result.message;
            this.successNotification(this.errorMessage);
            this.getEmployeeDirectoryData();
          } else if (result.status === 'Error') {
            this.errorMessage = result.message;
          }
        }
      }
    });
  }
  empHold(data: any) {
    console.log('Employee On Hold-->' + data);
    let dialogRef = this.dialog.open(EmployeeHoldModelComponent, {
      width: '500px',
      panelClass: 'custom-dialog-container',
    });

    dialogRef.afterClosed().subscribe(result => {
      console.log('The dialog was closed');
    });
  }
  getAuthenticationForEditEmp(empcode: any) {
      console.log('empeditable is true')
      this.router.navigate(['/employees/edit-employee/' + empcode]);
  }
  empDelete(data: any) {
      console.log('empeditable is true')
      console.log('Employee On Delete-->' + JSON.stringify(data));
      let dialogRef = this.dialog.open(EmployeeDeleteModelComponent, {
        width: '500px',
        panelClass: 'custom-dialog-container',
        // tslint:disable-next-line:max-line-length
        data: {
          empCode: data.empCode,
          city: data.city,
          state: data.state,
          pfRegistrationCode: data.pfRegistrationCode,
          esicRegistrationCode: data.esicRegistrationCode,
          professionalTaxRegistrationCode: data.professionalTaxRegistrationCode,
          lwfRegistrationCode: data.lwfRegistrationCode,
          message: this.errorMessage, status: this.action
        }
      });
      dialogRef.afterClosed().subscribe(result => {
        // console.log('The dialog was closed....................' + result.message);
        if (result !== undefined) {
          console.log('Result value ..... ' + JSON.stringify(result));
          if (result.message) {
            console.log('Result value ..... ' + result.message);
            if (result.status === 'Response') {
              this.errorMessage = result.message;
              this.successNotification(this.errorMessage);

              this.getEmployeeDirectoryData();
            }
            // tslint:disable-next-line:one-line
            else if (result.status === 'Error') {
              this.errorMessage = result.message;
              // this.warningNotification(this.errorMessage);
            }
          }
          // tslint:disable-next-line:one-line
        }

      });
  }
  changeEmployeeStatus(fullName, empCode: any, action) {
    console.log('Employee On Hold-->' + empCode);
    let dialogRef = this.dialog.open(EmployeeChangeStatusComponent, {
      width: '500px',
      panelClass: 'custom-dialog-container', data: { empCode: fullName + '-' + empCode, code: empCode, action: action }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result != undefined) {
        console.log('Result value ..... ' + result.message);
        if (result.status === 'Response') {
          this.successNotification(result.message);
          this.getEmployeeDirectoryData();
        }
        // tslint:disable-next-line:one-line
        else if (result.status === 'Error') {
          this.errorMessage = result.message;
          // this.warningNotification(this.errorMessage);
        }
      }
      // tslint:disable-next-line:one-line
    });
  }

  bulkOnboard() {
    const dialogRef = this.dialog.open(BulkOnboardComponent, {
      width: '500px',
      panelClass: 'custom-dialog-container',
      data: { event: event }
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result !== undefined) {
        if (result.message !== null) {
          // this.successNotification();
          this.getEmployeeDirectoryData();
          // }else{
          //   // this.warningNotification(result.message);
          // }
        }
      }
    });
  }

  bulkInvite() {
    var selectedEmployee = [];
    console.log(this.selectedRows);
    this.selectedRows.forEach(rows => {
      selectedEmployee.push(rows.empCode)
    });
    console.log(selectedEmployee);
    if (selectedEmployee.length > 0) {
      console.log(this.selectedRows);
      let dialogRef = this.dialog.open(BulkEmployeeInviteModelComponent, {
        panelClass: 'custom-dialog-container',
        data: { empCodeArray: selectedEmployee }

      });

      dialogRef.afterClosed().subscribe(result => {

        if (result !== undefined) {
          console.log('Result value ..... ' + JSON.stringify(result));
          if (result.status = "Response") {
            console.log('Result value ..... ' + result.message);
            if (result.status === 'Response') {
              this.errorMessage = result.message;
              this.successNotification(this.errorMessage);

              this.getEmployeeDirectoryData();
            }
            else if (result.status === 'Error') {
              this.errorMessage = result.message;
            }
          }
        }
        this.selection.clear()
      });
    } else {
      this.selectedRows = [];
      selectedEmployee = [];
      this.selection.clear();
      this.warningNotification('Select employee first');
    }
  }

  empInvite(empCode: any) {
    // console.log('Employee On Invite-->' + JSON.stringify(empCode));
    let dialogRef = this.dialog.open(EmployeeInviteModelComponent, {
      width: '500px',
      panelClass: 'custom-dialog-container',
      // tslint:disable-next-line:max-line-length
      data: { empCode: empCode, message: this.errorMessage, status: this.action }

    });

    dialogRef.afterClosed().subscribe(result => {
      //  console.log('The dialog was closed....................' + result.message);
      if (result !== undefined) {
        console.log('Result value ..... ' + JSON.stringify(result));
        if (result.message) {
          console.log('Result value ..... ' + result.message);
          if (result.status === 'Response') {
            this.errorMessage = result.message;
            this.successNotification(this.errorMessage);

            this.getEmployeeDirectoryData();
          }
          // tslint:disable-next-line:one-line
          else if (result.status === 'Error') {
            this.errorMessage = result.message;
            // this.warningNotification(this.errorMessage);
          }
        }
        // tslint:disable-next-line:one-line
      }

    });
  }

  navigateToEmpDetails() {
    this.router.navigate(['employees/employee-details'])
  }
}
// ---------------- Employee hold model start ------------------------
@Component({
  selector: 'app-employee-hold',
  templateUrl: 'employee-hold.html',
  styleUrls: ['./employee-model.scss']
})
export class EmployeeHoldModelComponent {
  constructor(
    private _fb: FormBuilder,
    public dialogRef: MatDialogRef<EmployeeHoldModelComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any) {
    console.log('data-->' + data.empCode);

  }

  onNoClick(): void {
    this.dialogRef.close();
  }
}
// ---------------------- Employee hold model end ------------------------

@Component({
  selector: 'change-employee-status',
  templateUrl: 'change-employee-status.html',
  styleUrls: ['./change-employee-status.scss']
})
export class EmployeeChangeStatusComponent {
  empCode = ''
  empAction = ''
  action = ''
  message = ''
  error = '';
  code
  constructor(
    private _fb: FormBuilder,
    public dialogRef: MatDialogRef<EmployeeChangeStatusComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any, private serviceApi: ApiCommonService) {
    console.log('data-->' + data.empCode);
    this.empCode = data.empCode;
    this.empAction = data.action;
    this.code = data.code
    if (data.action === 'ON_HOLD') {
      this.message = 'Do you want to put ' + this.empCode + ' on Hold' + ' ?'
    } else if (data.action === 'ACTIVE') {
      this.message = 'Do you want to activate profile for ' + this.empCode + ' ?'
    } else if (data.action === 'SEPARATED') {
      this.message = 'Do you want to terminate ' + this.empCode + ' ?'
    }

  }

  close(): void {
    this.data.message = this.error;
    this.data.status = this.action;
    this.dialogRef.close(this.data);
  }
  changeEmployeeStatus() {
    console.log('Empcode passed to invite url-->' + this.data);
    const body = {
      action: this.empAction
    }
    this.serviceApi.put('/v1/employee/' + this.data.code + '/action', body).
      subscribe(
        res => {
          console.log('Successfully...' + JSON.stringify(res));
          console.log('Successfully11...' + res.statusMsg);
          this.action = 'Response';
          this.error = 'Employment status changed successfully';
          this.close();
        },
        err => {

          console.log('there is something error.....  ' + JSON.stringify(err));
          this.action = 'Error';
          // this.error = JSON.parse(err._body.toString()).message;
          this.close();
        });
  }


  onNoClick(): void {
    this.dialogRef.close();
  }
}
// ---------------- Employee delete model start ------------------------

@Component({
  selector: 'app-employee-delete',
  templateUrl: 'employee-delete.html',
  styleUrls: ['./employee-model.scss']
})
export class EmployeeDeleteModelComponent {
  action: any;
  error = 'Error message';
  constructor(
    private _fb: FormBuilder, private serviceApi: ApiCommonService,
    public dialogRef: MatDialogRef<EmployeeDeleteModelComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any) {


  }




  clickToDeleteEmployee() {
    this.serviceApi.delete('/v1/employee/' + this.data.empCode).
      subscribe(
        res => {
          console.log('Applied Leave Successfully...' + JSON.stringify(res));
          this.action = 'Response';
          this.error = res.message;
          this.close();
        },
        err => {
          console.log('there is something error.....  ' + JSON.stringify(err));
          this.action = 'Error';
          this.error = JSON.parse(err._body.toString()).message;
          this.close();
        });
  }



  close(): void {
    this.data.message = this.error;
    this.data.status = this.action;
    this.dialogRef.close(this.data);
  }
  onNoClick(): void {
    this.dialogRef.close(this.data);
  }
}

@Component({
  templateUrl: 'employee-invite.html',
  styleUrls: ['./employee-model.scss']
})
export class EmployeeInviteModelComponent {
  action: any;
  error = 'Error message';
  constructor(
    private _fb: FormBuilder, private serviceApi: ApiCommonService,
    public dialogRef: MatDialogRef<EmployeeInviteModelComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any) {

  }

  clickToInviteEmployee() {
    console.log('Empcode passed to invite url-->' + this.data);
    this.serviceApi.get('/v1/employee/' + this.data.empCode + '/invite').
      subscribe(
        res => {
          console.log('Successfully...' + JSON.stringify(res));
          console.log('Successfully11...' + res.statusMsg);
          this.action = 'Response';
          this.error = 'Email invite sent successfully.';
          this.close();
        },
        err => {

          console.log('there is something error.....  ' + JSON.stringify(err));
          this.action = 'Error';
          this.error = JSON.parse(err._body.toString()).message;
          this.close();
        });
  }



  close(): void {
    console.log('this.data');
    this.data.message = this.error;
    this.data.status = this.action;
    console.log("message----- " + this.data.message);
    this.dialogRef.close(this.data);
  }
  onNoClick(): void {
    this.dialogRef.close(this.data);
  }
}

@Component({
  templateUrl: 'bulk-employee-invite.html',
  styleUrls: ['./employee-model.scss']
})
export class BulkEmployeeInviteModelComponent {

  action: any;
  error = 'Error message';
  constructor(public dialog: MatDialog,
    private _fb: FormBuilder, private serviceApi: ApiCommonService,
    public dialogRef: MatDialogRef<EmployeeInviteModelComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any) {
    console.log(this.data);
  }

  // empDelete(data: any) {
  //     console.log('empeditable is true')
  //     console.log('Employee On Delete-->' + JSON.stringify(data));
  //     let dialogRef = this.dialog.open(EmployeeDeleteModelComponent, {
  //       width: '400px',
  //       // tslint:disable-next-line:max-line-length
  //       data: {
  //         empCode: data.empCode,
  //         city: data.city,
  //         state: data.state,
  //         pfRegistrationCode: data.pfRegistrationCode,
  //         esicRegistrationCode: data.esicRegistrationCode,
  //         professionalTaxRegistrationCode: data.professionalTaxRegistrationCode,
  //         lwfRegistrationCode: data.lwfRegistrationCode,
  //         message: this.errorMessage, status: this.action
  //       }
  //     });
  //     dialogRef.afterClosed().subscribe(result => {
  //       // console.log('The dialog was closed....................' + result.message);
  //       if (result !== undefined) {
  //         console.log('Result value ..... ' + JSON.stringify(result));
  //         if (result.message) {
  //           console.log('Result value ..... ' + result.message);
  //           if (result.status === 'Response') {
  //             this.errorMessage = result.message;
  //             this.successNotification(this.errorMessage);
  //           }
  //           // tslint:disable-next-line:one-line
  //           else if (result.status === 'Error') {
  //             this.errorMessage = result.message;
  //             // this.warningNotification(this.errorMessage);
  //           }
  //         }
  //         // tslint:disable-next-line:one-line
  //         this.getEmployeeDirectoryData();
  //       }

  //     });
  // }

  clickToInviteEmployee() {
    console.log('Empcode passed to invite url-->' + this.data.empCodeArray);
    this.serviceApi.get('/v1/employee/' + this.data.empCodeArray + '/invite').
      subscribe(
        res => {
          console.log('Successfully...' + JSON.stringify(res));
          console.log('Successfully11...' + res.message);
          this.action = 'Response';
          this.error = res.message;
          this.close();

          let dialogRef = this.dialog.open(BulkEmployeeInviteResponeModelComponent, {
            width: '500px',
            panelClass: 'custom-dialog-container',
            // tslint:disable-next-line:max-line-length
            data: {
              res: res,
              title: "Employee Onboarding Status Report"
            }
          });

          dialogRef.afterClosed().subscribe(result => {
            if (result !== undefined) {
              console.log('Result value ..... ' + JSON.stringify(result));
              if (result.message) {
                console.log('Result value ..... ' + result.message);
                if (result.status === 'Response') {
                  // this.errorMessage = result.message;
                  // this.successNotification(this.errorMessage);
                }
                // tslint:disable-next-line:one-line
                else if (result.status === 'Error') {
                  // this.errorMessage = result.message;
                  // this.warningNotification(this.errorMessage);
                }
              }
              // tslint:disable-next-line:one-line
              // this.getEmployeeDirectoryData();
            }

          });
        },
        err => {

          console.log('there is something error.....  ' + JSON.stringify(err));
          this.action = 'Error';
          this.error = JSON.parse(err._body.toString()).message;
          this.close();
        });
  }



  close(): void {
    console.log('this.data');
    this.data.message = this.error;
    this.data.status = this.action;
    console.log("message----- " + this.data.message);
    this.dialogRef.close(this.data);
  }
  onNoClick(): void {
    this.dialogRef.close(this.data);
  }

}


@Component({
  templateUrl: 'bulk-invite-response.html',
  styleUrls: ['./employee-model.scss']
})
export class BulkEmployeeInviteResponeModelComponent implements OnInit {

  action: any;
  error = 'Error message';
  res: any;
  title: any;
  dataSource: MatTableDataSource<Element>;
  displayedColumns = ['empCode', 'statusMsg', 'inviteStatus'];
  @ViewChild(MatSort) sort: MatSort;
  @ViewChild(MatPaginator) paginator: MatPaginator;
  constructor(
    private _fb: FormBuilder, private serviceApi: ApiCommonService,
    public dialogRef: MatDialogRef<EmployeeInviteModelComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any) {
    console.log(JSON.stringify(this.data));
    this.res = [];
    this.res = this.data.res;
    this.title = this.data.title;
    console.log(JSON.stringify(this.res));
  }

  ngOnInit() {


  }
  ngAfterViewInit() {
    console.log(this.res);
    this.dataSource = new MatTableDataSource<Element>(this.res);
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }

  close(): void {
    console.log('this.data');
    this.data.message = this.error;
    this.data.status = this.action;
    console.log("message----- " + this.data.message);
    this.dialogRef.close(this.data);
  }
  onNoClick(): void {
    this.dialogRef.close(this.data);
  }


}
@Component({
  templateUrl: 'upload-salary-structure.html',
  styleUrls: ['./employee-model.scss']
})
export class BulkUploadSalaryComponent implements OnInit {
  // salaryStructure: FormGroup;
  ctcTemplateList = [];
  errorMessage: any;
  selectedFiles: FileList;
  currentFileUpload: File;
  constructor(public dialogRef: MatDialogRef<BulkUploadSalaryComponent>, private fb: FormBuilder, private serviceApi: ApiCommonService,
    private uploadService: UploadFileService, public dialog: MatDialog,
    @Inject(MAT_DIALOG_DATA) public data: any) {
    // this.salaryStructure = this.fb.group({
    // templateName: ['', Validators.required],
    // });
    // this.serviceApi.get('/v1/payroll/ctc/template/').
    //   subscribe(
    //   res => {
    //     res.forEach(element => {
    //       this.ctcTemplateList.push(
    //         { ctcTemplateId: element.ctcTemplateId, templateName: element.templateName });
    //     });
    //   });
  }
  onNoClick(): void {
    this.dialogRef.close();
  }
  downloadTemplate() {
    // if (this.salaryStructure.controls.templateName.value != '') {
    // console.log(this.salaryStructure.controls.templateName.value);
    this.serviceApi.get('/v1/employee/salary/sheet').subscribe(res => {
      console.log(res);
      window.open(environment.storageServiceBaseUrl + res.url);

    }, (err) => {

    }, () => {

    });
    // }

  }
  successNotification(successMessage: any) {
    $.notifyClose();
    $.notify({
      icon: 'check_circle',
      message: successMessage,
    },
      {
        type: 'success',
        timer: 4000,
        placement: {
          from: 'top',
          align: 'center'
        }
      });
  }
  selectFile(event) {
    // console.log(event);
    this.selectedFiles = event.target.files;
  }
  resetFile() {
    $('#uploadFile').val('');
  }
  uploadtemplate() {
    console.log('upload method called-->');
    this.currentFileUpload = this.selectedFiles.item(0);
    const file = <File>this.currentFileUpload;
    let formdata: FormData = new FormData();
    formdata.append('file', file);
    const url = '/v1/employee/salary/bulk-upload';
    // const url = '/v1/employee/salary/SalaryInfoUplaod/' + this.salaryStructure.controls.templateName.value;
    var response;
    this.uploadService.pushFileToStorage(this.currentFileUpload, url).subscribe(event => {
      if (event.type === HttpEventType.UploadProgress) {
      } else if (event instanceof HttpResponse) {
        console.log(event.body);
        this.dialogRef.close(this.data);
        let dialogRef = this.dialog.open(BulkEmployeeInviteResponeModelComponent, {
          width: '500px',
          panelClass: 'custom-dialog-container',
          data: {
            res: event.body,
            title: "Employee Salary Structure Report"
          }
        });
        dialogRef.afterClosed().subscribe(result => {
          if (result !== undefined) {
            console.log('Result value ..... ' + JSON.stringify(result));
            if (result.message) {
              console.log('Result value ..... ' + result.message);
              if (result.status === 'Response') {
                this.errorMessage = result.message;
                this.successNotification(this.errorMessage);
              }
              else if (result.status === 'Error') {
                this.errorMessage = result.message;
              }
            }
          }
        });
      }
    },
      err => {
        console.log('error :::' + err);
      },
      () => {
        console.log(JSON.stringify(response));
        this.resetFile();
      }
    );
  }

  ngOnInit() {

  }
}

@Component({
  templateUrl: './bulkonboard.component.html',
  styleUrls: ['./employee-model.scss']
})
export class BulkOnboardComponent implements OnInit {
  ngOnInit(): void {

  }
  ctcTemplateList = [];
  action: any;
  error: any;
  errorMessage: any;
  selectedFiles: FileList;
  currentFileUpload: File;
  selectedFilesName: string;
  notificationMsg: any;
  message: any;
  constructor(public dialogRef: MatDialogRef<BulkUploadSalaryComponent>, private fb: FormBuilder, private serviceApi: ApiCommonService,
    private uploadService: UploadFileService, public dialog: MatDialog,
    @Inject(MAT_DIALOG_DATA) public data: any) {
  }
  onNoClick(): void {
    this.dialogRef.close();
  }
  downloadFormat() {
    window.open(environment.storageServiceBaseUrl + "EmployeeOnboard.xlsx");


  }
  uploadFormat() {
    $('#uploadFile').click();
  }

  successNotification(successMessage: any) {
    $.notifyClose();
    $.notify({
      icon: 'check_circle',
      message: successMessage,
    },
      {
        type: 'success',
        timer: 4000,
        placement: {
          from: 'top',
          align: 'center'
        }
      });
  }
  warningNotification(warningMessage: any) {
    $.notifyClose();
    $.notify({
      icon: 'error',
      message: warningMessage,
    },
      {
        type: 'warning',
        timer: 4000,
        placement: {
          from: 'top',
          align: 'center'
        }
      });
  }
  selectFile(event) {
    this.selectedFiles = event.target.files;
    this.selectedFilesName = this.selectedFiles.item(0).name;
    // console.log(this.selectedFiles.item(0).name);
  }


  upload() {
    console.log('upload method called-->');
    this.currentFileUpload = this.selectedFiles.item(0);
    const file = <File>this.currentFileUpload;
    let formdata: FormData = new FormData();
    formdata.append('file', file);
    const url = '/v1/employee/onboard/bulkemployeeOnboard';

    this.uploadService.pushFileToStorage(this.currentFileUpload, url).subscribe(event => {
      console.log(event);
      if (event.type === HttpEventType.UploadProgress) {
      } else if (event instanceof HttpResponse) {
        if (event != null) {
          this.message = "Employee Successfully OnBoarded";
          this.close();
        } else {
        }
        // this.close();

        let dialogRef = this.dialog.open(BulkEmployeeInviteResponeModelComponent, {
          // width: '500px',
          panelClass: 'custom-dialog-container',
          data: {
            message: this.notificationMsg,
            res: event['body'],
            title: "Employee Onboarding Status Report"
          }
        });
        dialogRef.afterClosed().subscribe(result => {
          if (result !== undefined) {
            console.log('Result value ..... ' + JSON.stringify(result));
            if (result.message) {
              console.log('Result value ..... ' + result.message);
              if (result.status === 'Response') {
                this.notificationMsg = result.message;
                this.successNotification(this.notificationMsg);
              }
              else if (result.status === 'Error') {
                this.notificationMsg = result.message;
              }
            }
            // this.getEmployeeDirectoryData();
          }
        });
      }

    },
      err => {
        console.log('error :::' + err);
        // this.warningNotification(JSON.parse(err.error.toString()).message);
      }
    );
  }
  close(): void {
    this.data.message = this.message;
    this.dialogRef.close(this.data);
  }
}

@Component({
  templateUrl: 'resset-password.html',
})
export class ResetPasswordDialogComponent {
  action: any;
  error = 'Error message';
  resetForm: FormGroup;
  empCode
  constructor(public dialog: MatDialog, private _fb: FormBuilder, private serviceApi: ApiCommonService,
    public dialogRef: MatDialogRef<ResetPasswordDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any) {
    console.log(data)
    this.empCode = this.data.empCode
  }
  warningNotification(warningMessage: any) {
    $.notifyClose();
    $.notify({
      icon: 'error',
      message: warningMessage,
    },
      {
        type: 'warning',
        timer: 4000,
        placement: {
          from: 'top',
          align: 'center'
        }
      });
  }
  // tslint:disable-next-line: use-life-cycle-interface
  ngOnInit() {
    this.resetForm = this._fb.group({
      'empCode': [],
      'password': [null, [Validators.required]],
      'confirmPassword': [null, [Validators.required]],
    });
  }

  resetPassword() {
    if (this.resetForm.valid) {
      if (this.resetForm.controls.password.value === this.resetForm.controls.confirmPassword.value) {
        const body = {
          empCode: this.empCode,
          password: this.resetForm.controls.password.value,
        };
        this.serviceApi.put('/v1/employee/reset-password', body).subscribe(res => {
          console.log('Reset Password Successfully...' + JSON.stringify(res));
          this.action = 'Response';
          this.error = res.message;
          this.close();
        },
          (err) => {
            console.log('there is something error.....  ' + err.message);
            this.action = 'Error';
            this.error = err.message;
            this.close();
          },
          () => {
          });
      } else {
        this.warningNotification('Passwords do not match. Please provide the same password in both fields.');
      }
    } else {
      Object.keys(this.resetForm.controls).forEach(field => {
        const control = this.resetForm.get(field);
        control.markAsTouched({ onlySelf: true });
      });
    }
  }
  close(): void {
    console.log('this.data');
    this.data.message = this.error;
    this.data.status = this.action;
    this.dialogRef.close(this.data);
  }
  onNoClick(): void {
    this.dialogRef.close(this.data);
  }
}

@Component({
  templateUrl: 'upload-file-attachment.dialog.html',
  styleUrls: ['upload-file-attachment.dialog.scss']
})

export class UploadPerquisitesFileAttachmentDialogComponent implements OnInit {
  message: any;
  error = 'Error Message';
  action: any;
  uploadPerquisitesForm: FormGroup
  selectedFiles: FileList;
  selectedFilesName: string;
  currentFileUpload: File;
  taxYearID: any;
  taxYearList: any = [];
  constructor(public dialogRef: MatDialogRef<UploadPerquisitesFileAttachmentDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any, private serviceApi: ApiCommonService, private _fb: FormBuilder) {
    this.taxYearList = data.taxYear;
  }
  warningNotification(warningMessage: any) {
    $.notifyClose();
    $.notify({
      icon: 'error',
      message: warningMessage,
    },
      {
        type: 'warning',
        timer: 4000,
        placement: {
          from: 'top',
          align: 'center'
        }
      });
  }
  onNoClick(): void {
    this.dialogRef.close();
  }
  downloadPerquisites() {
    this.serviceApi.get('/v1/employee/taxDeclaration/download-perqs/' + this.uploadPerquisitesForm.controls.taxYearData.value).subscribe(
      res => {
        window.open(environment.storageServiceBaseUrl + res.url);
      }
    );
  }
  uploadFormat() {
    $('#uploadFile').click();
  }
  selectFile(event) {
    this.selectedFiles = event.target.files;
    this.selectedFilesName = this.selectedFiles.item(0).name;
    this.uploadPerquisitesForm.controls.file.setValue(this.selectedFiles ? this.selectedFilesName : null)
  }
  ngOnInit() {
    this.uploadPerquisitesForm = this._fb.group({
      taxYearData: [null, Validators.required],
      file: ['', [FileValidator.validate]]
    })
  }
  upload(taxYearId) {
    if (this.uploadPerquisitesForm.controls.file.value == null) {
      this.warningNotification("Please select an attachment first.");
      return;
    }
    if (this.uploadPerquisitesForm.valid && this.uploadPerquisitesForm.controls.file.value != null) {
      this.currentFileUpload = this.selectedFiles.item(0);
      const file = <File>this.currentFileUpload;
      let formdata: FormData = new FormData();
      formdata.append('file', file);
      this.serviceApi.putWithFormData('/v1/employee/taxDeclaration/upload-perqs/' + taxYearId, formdata).subscribe(
        res => {
          this.action = 'Response';
          this.error = res.message;
          this.close();
        },
        err => {
          this.action = 'Error';
          this.error = err.message;
        });
    } else {
      Object.keys(this.uploadPerquisitesForm.controls).forEach(field => {
        const control = this.uploadPerquisitesForm.get(field);
        control.markAsTouched({ onlySelf: true });
      });
      this.uploadPerquisitesForm.controls.file.setValidators([Validators.required])
    }
  }
  close(): void {
    this.data.message = this.error;
    this.data.status = this.action;
    this.dialogRef.close(this.data);
  }
}

@Component({
  templateUrl: 'upload-employees-investment.dialog.html',
  styleUrls: ['upload-file-attachment.dialog.scss']
})

export class UploadEmployeesInvestmentDialogComponent implements OnInit {
  message: any;
  error = 'Error Message';
  action: any;
  uploadInvestmentForm: FormGroup
  selectedFiles: FileList;
  selectedFilesName: string;
  currentFileUpload: File;
  taxYearID: any;
  taxYearList: any = [];
  constructor(public dialogRef: MatDialogRef<UploadEmployeesInvestmentDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any, private serviceApi: ApiCommonService, private _fb: FormBuilder) {
    this.taxYearList = data.taxYear;
  }
  warningNotification(warningMessage: any) {
    $.notifyClose();
    $.notify({
      icon: 'error',
      message: warningMessage,
    },
      {
        type: 'warning',
        timer: 4000,
        placement: {
          from: 'top',
          align: 'center'
        }
      });
  }

  downloadEmployeeInvestment() {
    this.serviceApi.get('/v1/employee/taxDeclaration/generate/investment-declarations/').subscribe(
      res => {
        window.open(environment.storageServiceBaseUrl + res.url);
      }
    );
  }
  uploadFormat() {
    $('#uploadFile').click();
  }
  selectFile(event) {
    this.selectedFiles = event.target.files;
    this.selectedFilesName = this.selectedFiles.item(0).name;
    this.uploadInvestmentForm.controls.file.setValue(this.selectedFiles ? this.selectedFilesName : null)
  }
  ngOnInit() {
    this.uploadInvestmentForm = this._fb.group({
      verified: [null, Validators.required],
      file: ['', [FileValidator.validate]]
    })
  }
  upload(verified) {
    if (this.uploadInvestmentForm.controls.file.value == null) {
      this.warningNotification("Please select an attachment first.");
      return;
    }
    if (this.uploadInvestmentForm.valid && this.uploadInvestmentForm.controls.file.value != null) {
      const formData = new FormData();
      this.currentFileUpload = this.selectedFiles.item(0);
      const file = <File>this.currentFileUpload;
      let formdata: FormData = new FormData();
      formdata.append('file', file);
      formData.append("verified", verified);
      if (file !== undefined) { formData.append("file", file, file.name); }
      this.serviceApi.putWithFormData('/v1/employee/taxDeclaration/upload/investment-declarations/', formData).subscribe(
        res => {
          this.action = 'Response';
          this.error = res.message;
          this.close();
        },
        err => {
          this.action = 'Error';
          this.error = err.message;
        });
    } else {
      Object.keys(this.uploadInvestmentForm.controls).forEach(field => {
        const control = this.uploadInvestmentForm.get(field);
        control.markAsTouched({ onlySelf: true });
      });
      this.uploadInvestmentForm.controls.file.setValidators([Validators.required])
    }
  }
  onNoClick(): void {
    this.dialogRef.close();
  }
  close(): void {
    this.data.message = this.error;
    this.data.status = this.action;
    this.dialogRef.close(this.data);
  }
}

// ---bulk upload employee details ------
@Component({
  templateUrl: './bulk-upload-details.component.html',
  styleUrls: ['./employee-model.scss']
})
export class BulkUploadEmployeeDetailsComponent implements OnInit {
  noFileSelected: boolean = false;
  ngOnInit(): void {

  }
  action: any;
  error: any;
  errorMessage: any;
  selectedFiles: FileList;
  currentFileUpload: File;
  selectedFilesName: string;
  notificationMsg: any;
  message: any;
  constructor(public dialogRef: MatDialogRef<BulkUploadEmployeeDetailsComponent>, private fb: FormBuilder, private serviceApi: ApiCommonService,
    private uploadService: UploadFileService, public dialog: MatDialog,
    @Inject(MAT_DIALOG_DATA) public data: any) {
  }
  onNoClick(): void {
    this.dialogRef.close();
  }
  downloadFormat() {
    this.serviceApi.get('/v1/employee/onboard/employee/details').subscribe(res => {
      window.open(environment.storageServiceBaseUrl + res.url);
    })    
  }
  uploadFormat() {
    $('#uploadFile').click();
  }

  selectFile(event) {
    this.selectedFiles = event.target.files;
    this.selectedFilesName = this.selectedFiles.item(0).name;
    this.noFileSelected = false
  }

  upload() {
   if (this.selectedFiles!=undefined) {
    this.currentFileUpload = this.selectedFiles[0];
    const file = <File>this.currentFileUpload;
    let formdata: FormData = new FormData();
    formdata.append('file', file);
    const url = '/v1/employee/onboard';

    this.serviceApi.postWithFormData(url, formdata).subscribe(res => {
      this.action = 'Response';
      this.message = 'Employee details uploaded successfuly';
      this.close();
    },
    err => {
      this.action = 'Error';
      this.message = 'Something went wrong';
    });
   }
   else {
     this.noFileSelected = true
   }
  }
  close(): void {
    this.data.message = this.message;
    this.data.status = this.action;
    this.dialogRef.close(this.data);
  }
}
